# Script de v√©rification du mat√©riel pour Paradis IA V2
# Ce script analyse votre syst√®me pour v√©rifier sa compatibilit√© avec le Paradis IA V2

Write-Host "üîç Analyse du mat√©riel pour Paradis IA V2 - √âdition Haute Performance" -ForegroundColor Cyan
Write-Host "Configuration cible recommand√©e: Windows 11, RTX 4060, 32-64 Go RAM" -ForegroundColor Yellow
Write-Host "-----------------------------------------------------------------------" -ForegroundColor Cyan

# Fonction pour cr√©er un rapport HTML
function Create-HtmlReport {
    param(
        [string]$reportPath,
        [hashtable]$systemInfo
    )
    
    $htmlContent = @"
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport de Compatibilit√© - Paradis IA V2</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            color: #0066cc;
            border-bottom: 2px solid #0066cc;
            padding-bottom: 10px;
        }
        h2 {
            color: #0066cc;
            margin-top: 30px;
        }
        .section {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .success {
            color: #2e7d32;
            background-color: #e8f5e9;
            padding: 5px;
            border-radius: 4px;
            font-weight: bold;
        }
        .warning {
            color: #ef6c00;
            background-color: #fff3e0;
            padding: 5px;
            border-radius: 4px;
            font-weight: bold;
        }
        .error {
            color: #c62828;
            background-color: #ffebee;
            padding: 5px;
            border-radius: 4px;
            font-weight: bold;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #0066cc;
            color: white;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
        .recommendation {
            background-color: #e1f5fe;
            border-left: 4px solid #0288d1;
            padding: 15px;
            margin: 20px 0;
        }
        .badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 14px;
            font-weight: bold;
        }
        .badge-optimal {
            background-color: #43a047;
            color: white;
        }
        .badge-compatible {
            background-color: #fb8c00;
            color: white;
        }
        .badge-minimal {
            background-color: #e53935;
            color: white;
        }
    </style>
</head>
<body>
    <h1>Rapport de Compatibilit√© - Paradis IA V2</h1>
    <p>Date du rapport: $($systemInfo.Date)</p>
    
    <div class="section">
        <h2>R√©sum√©</h2>
        <p>Niveau de compatibilit√© global: <span class="badge badge-$($systemInfo.CompatibilityLevel)">$($systemInfo.CompatibilityLevelText)</span></p>
        <p>$($systemInfo.SummaryText)</p>
    </div>
    
    <div class="section">
        <h2>Sp√©cifications syst√®me</h2>
        <table>
            <tr>
                <th>Composant</th>
                <th>D√©tails</th>
                <th>Statut</th>
            </tr>
            <tr>
                <td>Syst√®me d'exploitation</td>
                <td>$($systemInfo.OS)</td>
                <td class="$($systemInfo.OSStatus)">$($systemInfo.OSStatusText)</td>
            </tr>
            <tr>
                <td>CPU</td>
                <td>$($systemInfo.CPU)</td>
                <td class="$($systemInfo.CPUStatus)">$($systemInfo.CPUStatusText)</td>
            </tr>
            <tr>
                <td>Carte graphique</td>
                <td>$($systemInfo.GPU)</td>
                <td class="$($systemInfo.GPUStatus)">$($systemInfo.GPUStatusText)</td>
            </tr>
            <tr>
                <td>M√©moire RAM</td>
                <td>$($systemInfo.RAM) Go</td>
                <td class="$($systemInfo.RAMStatus)">$($systemInfo.RAMStatusText)</td>
            </tr>
            <tr>
                <td>Espace disque disponible</td>
                <td>$($systemInfo.Disk) Go</td>
                <td class="$($systemInfo.DiskStatus)">$($systemInfo.DiskStatusText)</td>
            </tr>
        </table>
    </div>
    
    <div class="section">
        <h2>Environnement CUDA</h2>
        <table>
            <tr>
                <th>Composant</th>
                <th>D√©tails</th>
                <th>Statut</th>
            </tr>
            <tr>
                <td>Pilotes NVIDIA</td>
                <td>$($systemInfo.NVDriver)</td>
                <td class="$($systemInfo.NVDriverStatus)">$($systemInfo.NVDriverStatusText)</td>
            </tr>
            <tr>
                <td>CUDA Toolkit</td>
                <td>$($systemInfo.CUDA)</td>
                <td class="$($systemInfo.CUDAStatus)">$($systemInfo.CUDAStatusText)</td>
            </tr>
            <tr>
                <td>cuDNN</td>
                <td>$($systemInfo.cuDNN)</td>
                <td class="$($systemInfo.cuDNNStatus)">$($systemInfo.cuDNNStatusText)</td>
            </tr>
        </table>
    </div>
    
    <div class="recommendation">
        <h2>Recommandations</h2>
        <ul>
            $($systemInfo.Recommendations)
        </ul>
    </div>
    
    <p><small>Rapport g√©n√©r√© par le script de v√©rification de Paradis IA V2</small></p>
</body>
</html>
"@
    
    $htmlContent | Out-File -FilePath $reportPath -Encoding utf8
    return $reportPath
}

# Cr√©er un objet pour stocker les informations du syst√®me
$systemInfo = @{
    Date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    CompatibilityLevel = "minimal"
    CompatibilityLevelText = "Minimal"
    SummaryText = "Analyse en cours..."
    OS = "Inconnu"
    OSStatus = "warning"
    OSStatusText = "√Ä v√©rifier"
    CPU = "Inconnu"
    CPUStatus = "warning"
    CPUStatusText = "√Ä v√©rifier"
    GPU = "Inconnu"
    GPUStatus = "warning"
    GPUStatusText = "√Ä v√©rifier"
    RAM = 0
    RAMStatus = "warning"
    RAMStatusText = "√Ä v√©rifier"
    Disk = 0
    DiskStatus = "warning"
    DiskStatusText = "√Ä v√©rifier"
    NVDriver = "Non d√©tect√©"
    NVDriverStatus = "warning"
    NVDriverStatusText = "√Ä v√©rifier"
    CUDA = "Non d√©tect√©"
    CUDAStatus = "warning"
    CUDAStatusText = "√Ä v√©rifier"
    cuDNN = "Non d√©tect√©"
    cuDNNStatus = "warning"
    cuDNNStatusText = "√Ä v√©rifier"
    Recommendations = "<li>Initialisation des recommandations...</li>"
}

# Variables pour stocker les recommandations
$recommendations = @()

# 1. V√©rifier le syst√®me d'exploitation
Write-Host "`nüñ•Ô∏è V√©rification du syst√®me d'exploitation..." -ForegroundColor Cyan
$osInfo = Get-CimInstance Win32_OperatingSystem
$osCaption = $osInfo.Caption
$osBuild = $osInfo.BuildNumber
$osArch = $osInfo.OSArchitecture

$systemInfo.OS = "$osCaption (Build $osBuild, $osArch)"

# V√©rifier si Windows 10/11
if ($osCaption -match "Windows 11") {
    $systemInfo.OSStatus = "success"
    $systemInfo.OSStatusText = "Optimal"
    Write-Host "‚úÖ Syst√®me d'exploitation: $osCaption (Optimal)" -ForegroundColor Green
}
elseif ($osCaption -match "Windows 10") {
    $systemInfo.OSStatus = "success"
    $systemInfo.OSStatusText = "Compatible"
    Write-Host "‚úÖ Syst√®me d'exploitation: $osCaption (Compatible)" -ForegroundColor Green
}
else {
    $systemInfo.OSStatus = "warning"
    $systemInfo.OSStatusText = "Potentiellement incompatible"
    $recommendations += "<li>Envisagez de passer √† Windows 10 ou 11 pour une compatibilit√© optimale avec les biblioth√®ques IA.</li>"
    Write-Host "‚ö†Ô∏è Syst√®me d'exploitation: $osCaption (Compatibilit√© non garantie)" -ForegroundColor Yellow
}

# 2. V√©rifier le CPU
Write-Host "`nüîÑ V√©rification du processeur..." -ForegroundColor Cyan
$cpuInfo = Get-CimInstance Win32_Processor
$cpuName = $cpuInfo.Name
$cpuCores = $cpuInfo.NumberOfCores
$cpuLogicalProcessors = $cpuInfo.NumberOfLogicalProcessors

$systemInfo.CPU = "$cpuName ($cpuCores c≈ìurs, $cpuLogicalProcessors threads)"

if ($cpuCores -ge 8) {
    $systemInfo.CPUStatus = "success"
    $systemInfo.CPUStatusText = "Optimal"
    Write-Host "‚úÖ Processeur: $cpuName" -ForegroundColor Green
    Write-Host "   $cpuCores c≈ìurs, $cpuLogicalProcessors threads (Optimal)" -ForegroundColor Green
}
elseif ($cpuCores -ge 4) {
    $systemInfo.CPUStatus = "success"
    $systemInfo.CPUStatusText = "Compatible"
    Write-Host "‚úÖ Processeur: $cpuName" -ForegroundColor Green
    Write-Host "   $cpuCores c≈ìurs, $cpuLogicalProcessors threads (Compatible)" -ForegroundColor Green
}
else {
    $systemInfo.CPUStatus = "warning"
    $systemInfo.CPUStatusText = "Performances limit√©es"
    $recommendations += "<li>Votre CPU dispose de peu de c≈ìurs ($cpuCores). Les mod√®les les plus l√©gers sont recommand√©s.</li>"
    Write-Host "‚ö†Ô∏è Processeur: $cpuName" -ForegroundColor Yellow
    Write-Host "   $cpuCores c≈ìurs, $cpuLogicalProcessors threads (Performances potentiellement limit√©es)" -ForegroundColor Yellow
}

# 3. V√©rifier la carte graphique
Write-Host "`nüéÆ V√©rification de la carte graphique..." -ForegroundColor Cyan
try {
    $gpuInfo = nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader
    
    if ($gpuInfo) {
        $gpuParts = $gpuInfo.Split(",").Trim()
        $gpuName = $gpuParts[0]
        $gpuMemory = [math]::Round([int]($gpuParts[1].Split(" ")[0]) / 1024)
        $gpuDriver = $gpuParts[2]
        
        $systemInfo.GPU = "$gpuName ($gpuMemory Go)"
        $systemInfo.NVDriver = $gpuDriver
        
        # V√©rifier si c'est une RTX 4060 ou √©quivalent/sup√©rieur
        if ($gpuName -match "RTX 40|RTX 30|RTX A|Tesla|A100|H100") {
            $systemInfo.GPUStatus = "success"
            $systemInfo.GPUStatusText = "Optimal"
            $systemInfo.NVDriverStatus = "success"
            $systemInfo.NVDriverStatusText = "D√©tect√© ($gpuDriver)"
            Write-Host "‚úÖ GPU: $gpuName ($gpuMemory Go) - Optimal pour Paradis IA" -ForegroundColor Green
            Write-Host "   Pilote NVIDIA: $gpuDriver" -ForegroundColor Green
        }
        elseif ($gpuName -match "RTX 20|GTX 16|GTX 1[6-9]") {
            $systemInfo.GPUStatus = "success"
            $systemInfo.GPUStatusText = "Compatible"
            $systemInfo.NVDriverStatus = "success"
            $systemInfo.NVDriverStatusText = "D√©tect√© ($gpuDriver)"
            $recommendations += "<li>Votre GPU ($gpuName) est compatible mais des ajustements de quantification peuvent √™tre n√©cessaires pour les grands mod√®les.</li>"
            Write-Host "‚úÖ GPU: $gpuName ($gpuMemory Go) - Compatible avec Paradis IA" -ForegroundColor Green
            Write-Host "   Pilote NVIDIA: $gpuDriver" -ForegroundColor Green
        }
        else {
            $systemInfo.GPUStatus = "warning"
            $systemInfo.GPUStatusText = "Limit√©"
            $systemInfo.NVDriverStatus = "success"
            $systemInfo.NVDriverStatusText = "D√©tect√© ($gpuDriver)"
            $recommendations += "<li>Votre GPU ($gpuName) a des capacit√©s limit√©es pour l'IA. Utilisez des mod√®les quantifi√©s et plus l√©gers.</li>"
            Write-Host "‚ö†Ô∏è GPU: $gpuName ($gpuMemory Go) - Capacit√©s limit√©es pour l'IA" -ForegroundColor Yellow
            Write-Host "   Pilote NVIDIA: $gpuDriver" -ForegroundColor Green
        }
        
        # V√©rifier la version du pilote
        if ([version]$gpuDriver -lt [version]"530.0") {
            $systemInfo.NVDriverStatus = "warning"
            $systemInfo.NVDriverStatusText = "Mise √† jour recommand√©e"
            $recommendations += "<li>Mettez √† jour vos pilotes NVIDIA (actuellement $gpuDriver) vers la version 530+ pour de meilleures performances.</li>"
            Write-Host "‚ö†Ô∏è Version du pilote NVIDIA ($gpuDriver) ant√©rieure √† 530. Mise √† jour recommand√©e." -ForegroundColor Yellow
        }
    } else {
        throw "Impossible de d√©tecter les informations GPU"
    }
}
catch {
    $systemInfo.GPU = "Aucun GPU NVIDIA d√©tect√©"
    $systemInfo.GPUStatus = "error"
    $systemInfo.GPUStatusText = "Non compatible"
    $systemInfo.NVDriverStatus = "error"
    $systemInfo.NVDriverStatusText = "Non d√©tect√©"
    $recommendations += "<li>Aucun GPU NVIDIA d√©tect√©. L'acc√©l√©ration GPU ne sera pas disponible, ce qui limitera fortement les performances.</li>"
    
    # Essayer de d√©tecter toute carte graphique
    $displayAdapter = Get-CimInstance Win32_VideoController
    
    if ($displayAdapter) {
        $gpuName = $displayAdapter.Name
        $systemInfo.GPU = "$gpuName (Non NVIDIA)"
        Write-Host "‚ùå GPU: $gpuName - Non NVIDIA, incompatible avec l'acc√©l√©ration CUDA" -ForegroundColor Red
    } else {
        Write-Host "‚ùå GPU: Aucun GPU d√©tect√©" -ForegroundColor Red
    }
    
    Write-Host "‚ùå Pilotes NVIDIA: Non d√©tect√©s" -ForegroundColor Red
}

# 4. V√©rifier la RAM
Write-Host "`nüß† V√©rification de la m√©moire RAM..." -ForegroundColor Cyan
$ramInfo = Get-CimInstance Win32_ComputerSystem
$ramTotalGB = [math]::Round($ramInfo.TotalPhysicalMemory / 1GB, 2)

$systemInfo.RAM = $ramTotalGB

if ($ramTotalGB -ge 32) {
    $systemInfo.RAMStatus = "success"
    $systemInfo.RAMStatusText = "Optimal"
    Write-Host "‚úÖ M√©moire RAM: $ramTotalGB Go (Optimal)" -ForegroundColor Green
}
elseif ($ramTotalGB -ge 16) {
    $systemInfo.RAMStatus = "success"
    $systemInfo.RAMStatusText = "Compatible"
    $recommendations += "<li>Votre syst√®me dispose de $ramTotalGB Go de RAM. Certains mod√®les plus grands pourraient √™tre limit√©s.</li>"
    Write-Host "‚úÖ M√©moire RAM: $ramTotalGB Go (Compatible)" -ForegroundColor Green
}
else {
    $systemInfo.RAMStatus = "warning"
    $systemInfo.RAMStatusText = "Limit√©e"
    $recommendations += "<li>Votre syst√®me ne dispose que de $ramTotalGB Go de RAM. Limitez-vous aux mod√®les l√©gers et √† une seule instance √† la fois.</li>"
    Write-Host "‚ö†Ô∏è M√©moire RAM: $ramTotalGB Go (Limit√©e pour certains mod√®les)" -ForegroundColor Yellow
}

# 5. V√©rifier l'espace disque
Write-Host "`nüíæ V√©rification de l'espace disque..." -ForegroundColor Cyan
$diskInfo = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
$diskFreeGB = [math]::Round($diskInfo.FreeSpace / 1GB, 2)

$systemInfo.Disk = $diskFreeGB

if ($diskFreeGB -ge 100) {
    $systemInfo.DiskStatus = "success"
    $systemInfo.DiskStatusText = "Optimal"
    Write-Host "‚úÖ Espace disque disponible: $diskFreeGB Go (Optimal)" -ForegroundColor Green
}
elseif ($diskFreeGB -ge 50) {
    $systemInfo.DiskStatus = "success"
    $systemInfo.DiskStatusText = "Compatible"
    Write-Host "‚úÖ Espace disque disponible: $diskFreeGB Go (Compatible)" -ForegroundColor Green
}
else {
    $systemInfo.DiskStatus = "warning"
    $systemInfo.DiskStatusText = "Limit√©"
    $recommendations += "<li>Vous n'avez que $diskFreeGB Go d'espace libre. Lib√©rez de l'espace ou installez sur un autre disque.</li>"
    Write-Host "‚ö†Ô∏è Espace disque disponible: $diskFreeGB Go (Possiblement insuffisant)" -ForegroundColor Yellow
}

# 6. V√©rifier CUDA
Write-Host "`n‚ö° V√©rification de l'installation CUDA..." -ForegroundColor Cyan
$cudaInstalled = Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA"

if ($cudaInstalled) {
    try {
        $nvccOutput = nvcc --version
        $cudaVersion = [regex]::Match($nvccOutput, "release (\d+\.\d+)").Groups[1].Value
        
        $systemInfo.CUDA = "Version $cudaVersion"
        
        if ([version]$cudaVersion -ge [version]"11.8") {
            $systemInfo.CUDAStatus = "success"
            $systemInfo.CUDAStatusText = "Install√© ($cudaVersion)"
            Write-Host "‚úÖ CUDA Toolkit: Version $cudaVersion (Compatible)" -ForegroundColor Green
        } else {
            $systemInfo.CUDAStatus = "warning"
            $systemInfo.CUDAStatusText = "Version obsol√®te"
            $recommendations += "<li>Votre version CUDA ($cudaVersion) est obsol√®te. Installez la version 11.8+ pour une compatibilit√© optimale.</li>"
            Write-Host "‚ö†Ô∏è CUDA Toolkit: Version $cudaVersion (Mise √† jour recommand√©e vers 11.8+)" -ForegroundColor Yellow
        }
    } catch {
        $systemInfo.CUDA = "Install√© (Version inconnue)"
        $systemInfo.CUDAStatus = "warning"
        $systemInfo.CUDAStatusText = "Version inconnue"
        $recommendations += "<li>CUDA semble √™tre install√© mais la version n'a pas pu √™tre d√©tect√©e. V√©rifiez la configuration PATH.</li>"
        Write-Host "‚ö†Ô∏è CUDA Toolkit: Install√© mais version non d√©tectable" -ForegroundColor Yellow
    }
} else {
    $systemInfo.CUDA = "Non install√©"
    $systemInfo.CUDAStatus = "error"
    $systemInfo.CUDAStatusText = "Non install√©"
    $recommendations += "<li>CUDA n'est pas install√©. Installez CUDA Toolkit 11.8+ pour activer l'acc√©l√©ration GPU.</li>"
    Write-Host "‚ùå CUDA Toolkit: Non install√©" -ForegroundColor Red
}

# 7. V√©rifier cuDNN (difficile √† v√©rifier automatiquement)
Write-Host "`nüß© V√©rification de cuDNN..." -ForegroundColor Cyan
$potentialCuDNNPaths = @(
    "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v*\include\cudnn.h",
    "C:\Program Files\NVIDIA\CUDNN\v*\include\cudnn.h"
)

$cuDNNFound = $false
foreach ($path in $potentialCuDNNPaths) {
    if (Test-Path $path) {
        $cuDNNFound = $true
        break
    }
}

if ($cuDNNFound) {
    $systemInfo.cuDNN = "Install√©"
    $systemInfo.cuDNNStatus = "success"
    $systemInfo.cuDNNStatusText = "D√©tect√©"
    Write-Host "‚úÖ cuDNN: Install√©" -ForegroundColor Green
} else {
    $systemInfo.cuDNN = "Non d√©tect√©"
    $systemInfo.cuDNNStatus = "warning"
    $systemInfo.cuDNNStatusText = "Non d√©tect√©"
    $recommendations += "<li>cuDNN n'a pas √©t√© d√©tect√©. Il est recommand√© pour des performances optimales avec les r√©seaux de neurones.</li>"
    Write-Host "‚ö†Ô∏è cuDNN: Non d√©tect√© (installation recommand√©e)" -ForegroundColor Yellow
}

# 8. Calculer le niveau de compatibilit√© global
$compatibilityScore = 0
$maxScore = 7

# OS
if ($systemInfo.OSStatus -eq "success") { $compatibilityScore++ }

# CPU
if ($systemInfo.CPUStatus -eq "success") { $compatibilityScore++ }

# GPU
if ($systemInfo.GPUStatus -eq "success") { $compatibilityScore++ }

# RAM
if ($systemInfo.RAMStatus -eq "success") { $compatibilityScore++ }

# Disk
if ($systemInfo.DiskStatus -eq "success") { $compatibilityScore++ }

# CUDA
if ($systemInfo.CUDAStatus -eq "success") { $compatibilityScore++ }

# cuDNN
if ($systemInfo.cuDNNStatus -eq "success") { $compatibilityScore++ }

# D√©terminer le niveau global
$compatibilityPercent = [math]::Round(($compatibilityScore / $maxScore) * 100)

if ($compatibilityPercent -ge 80) {
    $systemInfo.CompatibilityLevel = "optimal"
    $systemInfo.CompatibilityLevelText = "Optimal ($compatibilityPercent%)"
    
    $systemInfo.SummaryText = "Votre syst√®me est parfaitement compatible avec Paradis IA V2. Vous pourrez ex√©cuter tous les mod√®les d'IA sans limitation."
    
    Write-Host "`n‚úÖ Compatibilit√© globale: OPTIMALE ($compatibilityPercent%)" -ForegroundColor Green
    Write-Host "Votre syst√®me est parfaitement adapt√© pour Paradis IA V2." -ForegroundColor Green
}
elseif ($compatibilityPercent -ge 60) {
    $systemInfo.CompatibilityLevel = "compatible"
    $systemInfo.CompatibilityLevelText = "Compatible ($compatibilityPercent%)"
    
    $systemInfo.SummaryText = "Votre syst√®me est compatible avec Paradis IA V2. Quelques ajustements peuvent √™tre n√©cessaires pour optimiser les performances."
    
    Write-Host "`n‚úÖ Compatibilit√© globale: COMPATIBLE ($compatibilityPercent%)" -ForegroundColor Green
    Write-Host "Votre syst√®me est compatible avec Paradis IA V2 avec quelques limitations." -ForegroundColor Green
}
else {
    $systemInfo.CompatibilityLevel = "minimal"
    $systemInfo.CompatibilityLevelText = "Limit√© ($compatibilityPercent%)"
    
    $systemInfo.SummaryText = "Votre syst√®me pr√©sente des limitations importantes pour Paradis IA V2. Des ajustements significatifs seront n√©cessaires."
    
    Write-Host "`n‚ö†Ô∏è Compatibilit√© globale: LIMIT√âE ($compatibilityPercent%)" -ForegroundColor Yellow
    Write-Host "Votre syst√®me pr√©sente des limitations pour Paradis IA V2." -ForegroundColor Yellow
}

# 9. Afficher les recommandations
if ($recommendations.Count -gt 0) {
    Write-Host "`nüìã Recommandations:" -ForegroundColor Cyan
    
    $systemInfo.Recommendations = $recommendations -join "`n"
    
    foreach ($rec in $recommendations) {
        # Extraire le texte √† l'int√©rieur des balises <li>
        $recText = $rec -replace "<li>|</li>", ""
        Write-Host "‚Ä¢ $recText" -ForegroundColor Yellow
    }
} else {
    $systemInfo.Recommendations = "<li>Aucune recommandation sp√©cifique - votre syst√®me est pr√™t pour Paradis IA V2.</li>"
    
    Write-Host "`nüìã Recommandations:" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Aucune recommandation sp√©cifique - votre syst√®me est pr√™t pour Paradis IA V2." -ForegroundColor Green
}

# 10. G√©n√©rer le rapport HTML
$reportPath = "..\rapport_compatibilite.html"
$fullReportPath = Create-HtmlReport -reportPath $reportPath -systemInfo $systemInfo

Write-Host "`nüìä Rapport g√©n√©r√©: $fullReportPath" -ForegroundColor Cyan
Write-Host "Vous pouvez consulter ce rapport pour plus de d√©tails et recommandations." -ForegroundColor Cyan

# 11. Mettre √† jour le fichier de suivi des √©tapes
try {
    $trackingFile = "..\suivi_etapes_paradis_ia_v2.md"
    if (Test-Path $trackingFile) {
        $trackingContent = Get-Content $trackingFile -Raw
        
        # Mettre √† jour le statut de la premi√®re √©tape
        $updatedContent = $trackingContent -replace "1. V√©rification mat√©riel \| √Ä faire \|", "1. V√©rification mat√©riel | Compl√©t√© |"
        
        # Ajouter la date de compl√©tion
        $completionDate = Get-Date -Format "yyyy-MM-dd"
        $updatedContent = $updatedContent -replace "1. V√©rification mat√©riel \| Compl√©t√© \| \|", "1. V√©rification mat√©riel | Compl√©t√© | $completionDate |"
        
        $updatedContent | Out-File $trackingFile -Encoding utf8
        
        Write-Host "`n‚úÖ Fichier de suivi mis √† jour avec succ√®s!" -ForegroundColor Green
    }
}
catch {
    Write-Host "`n‚ö†Ô∏è Impossible de mettre √† jour le fichier de suivi: $_" -ForegroundColor Yellow
}

# Conclusion
Write-Host "`nüöÄ V√©rification syst√®me termin√©e!" -ForegroundColor Cyan
Write-Host "Vous pouvez maintenant proc√©der √† l'installation de Paradis IA V2" -ForegroundColor Cyan
Write-Host "en suivant les recommandations adapt√©es √† votre mat√©riel." -ForegroundColor Cyan 